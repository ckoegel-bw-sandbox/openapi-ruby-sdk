=begin
#FrankenSpec

#Bandwidth's Frankensteined API Spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module RubySdk
  # This object represents all possible fields that may be included in callbacks related to call events, including events that come from BXML verbs
  class CallCallback
    attr_accessor :event_type

    attr_accessor :event_time

    attr_accessor :account_id

    attr_accessor :application_id

    attr_accessor :from

    attr_accessor :to

    attr_accessor :direction

    attr_accessor :call_id

    attr_accessor :call_url

    attr_accessor :start_time

    attr_accessor :answer_time

    attr_accessor :transfer_caller_id

    attr_accessor :transfer_to

    attr_accessor :cause

    attr_accessor :error_message

    attr_accessor :error_id

    attr_accessor :end_time

    attr_accessor :digit

    attr_accessor :parent_call_id

    attr_accessor :recording_id

    attr_accessor :duration

    attr_accessor :file_format

    attr_accessor :media_url

    attr_accessor :tag

    attr_accessor :channels

    attr_accessor :status

    attr_accessor :digits

    attr_accessor :terminating_digit

    attr_accessor :transcription

    attr_accessor :diversion

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'event_type' => :'eventType',
        :'event_time' => :'eventTime',
        :'account_id' => :'accountId',
        :'application_id' => :'applicationId',
        :'from' => :'from',
        :'to' => :'to',
        :'direction' => :'direction',
        :'call_id' => :'callId',
        :'call_url' => :'callUrl',
        :'start_time' => :'startTime',
        :'answer_time' => :'answerTime',
        :'transfer_caller_id' => :'transferCallerId',
        :'transfer_to' => :'transferTo',
        :'cause' => :'cause',
        :'error_message' => :'errorMessage',
        :'error_id' => :'errorId',
        :'end_time' => :'endTime',
        :'digit' => :'digit',
        :'parent_call_id' => :'parentCallId',
        :'recording_id' => :'recordingId',
        :'duration' => :'duration',
        :'file_format' => :'fileFormat',
        :'media_url' => :'mediaUrl',
        :'tag' => :'tag',
        :'channels' => :'channels',
        :'status' => :'status',
        :'digits' => :'digits',
        :'terminating_digit' => :'terminatingDigit',
        :'transcription' => :'transcription',
        :'diversion' => :'diversion'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'event_type' => :'String',
        :'event_time' => :'String',
        :'account_id' => :'String',
        :'application_id' => :'String',
        :'from' => :'String',
        :'to' => :'String',
        :'direction' => :'String',
        :'call_id' => :'String',
        :'call_url' => :'String',
        :'start_time' => :'String',
        :'answer_time' => :'String',
        :'transfer_caller_id' => :'String',
        :'transfer_to' => :'String',
        :'cause' => :'String',
        :'error_message' => :'String',
        :'error_id' => :'String',
        :'end_time' => :'String',
        :'digit' => :'String',
        :'parent_call_id' => :'String',
        :'recording_id' => :'String',
        :'duration' => :'String',
        :'file_format' => :'String',
        :'media_url' => :'String',
        :'tag' => :'String',
        :'channels' => :'Integer',
        :'status' => :'String',
        :'digits' => :'String',
        :'terminating_digit' => :'String',
        :'transcription' => :'Transcription',
        :'diversion' => :'Diversion'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubySdk::CallCallback` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubySdk::CallCallback`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'event_type')
        self.event_type = attributes[:'event_type']
      end

      if attributes.key?(:'event_time')
        self.event_time = attributes[:'event_time']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'call_id')
        self.call_id = attributes[:'call_id']
      end

      if attributes.key?(:'call_url')
        self.call_url = attributes[:'call_url']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'answer_time')
        self.answer_time = attributes[:'answer_time']
      end

      if attributes.key?(:'transfer_caller_id')
        self.transfer_caller_id = attributes[:'transfer_caller_id']
      end

      if attributes.key?(:'transfer_to')
        self.transfer_to = attributes[:'transfer_to']
      end

      if attributes.key?(:'cause')
        self.cause = attributes[:'cause']
      end

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.key?(:'error_id')
        self.error_id = attributes[:'error_id']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'digit')
        self.digit = attributes[:'digit']
      end

      if attributes.key?(:'parent_call_id')
        self.parent_call_id = attributes[:'parent_call_id']
      end

      if attributes.key?(:'recording_id')
        self.recording_id = attributes[:'recording_id']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'file_format')
        self.file_format = attributes[:'file_format']
      end

      if attributes.key?(:'media_url')
        self.media_url = attributes[:'media_url']
      end

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.key?(:'channels')
        self.channels = attributes[:'channels']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'digits')
        self.digits = attributes[:'digits']
      end

      if attributes.key?(:'terminating_digit')
        self.terminating_digit = attributes[:'terminating_digit']
      end

      if attributes.key?(:'transcription')
        self.transcription = attributes[:'transcription']
      end

      if attributes.key?(:'diversion')
        self.diversion = attributes[:'diversion']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          event_type == o.event_type &&
          event_time == o.event_time &&
          account_id == o.account_id &&
          application_id == o.application_id &&
          from == o.from &&
          to == o.to &&
          direction == o.direction &&
          call_id == o.call_id &&
          call_url == o.call_url &&
          start_time == o.start_time &&
          answer_time == o.answer_time &&
          transfer_caller_id == o.transfer_caller_id &&
          transfer_to == o.transfer_to &&
          cause == o.cause &&
          error_message == o.error_message &&
          error_id == o.error_id &&
          end_time == o.end_time &&
          digit == o.digit &&
          parent_call_id == o.parent_call_id &&
          recording_id == o.recording_id &&
          duration == o.duration &&
          file_format == o.file_format &&
          media_url == o.media_url &&
          tag == o.tag &&
          channels == o.channels &&
          status == o.status &&
          digits == o.digits &&
          terminating_digit == o.terminating_digit &&
          transcription == o.transcription &&
          diversion == o.diversion
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [event_type, event_time, account_id, application_id, from, to, direction, call_id, call_url, start_time, answer_time, transfer_caller_id, transfer_to, cause, error_message, error_id, end_time, digit, parent_call_id, recording_id, duration, file_format, media_url, tag, channels, status, digits, terminating_digit, transcription, diversion].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
