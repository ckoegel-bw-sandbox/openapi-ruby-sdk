=begin
#FrankenSpec

#Bandwidth's Frankensteined API Spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module RubySdk
  class CreateCallRequest
    # Format is E164
    attr_accessor :from

    # Format is E164 or SIP URI
    attr_accessor :to

    # A comma-separated list of 'User-To-User' headers to be sent in the INVITE when calling a SIP URI. Each value must end with an 'encoding' parameter as described in https://tools.ietf.org/html/rfc7433. Only 'jwt' and 'base64' encodings are allowed. The entire value cannot exceed 350 characters, including parameters and separators.
    attr_accessor :uui

    attr_accessor :call_timeout

    attr_accessor :callback_timeout

    attr_accessor :answer_url

    attr_accessor :answer_fallback_url

    attr_accessor :username

    attr_accessor :password

    attr_accessor :fallback_username

    attr_accessor :fallback_password

    attr_accessor :answer_method

    attr_accessor :answer_fallback_method

    attr_accessor :disconnect_url

    attr_accessor :disconnect_method

    attr_accessor :tag

    attr_accessor :application_id

    attr_accessor :machine_detection

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'from' => :'from',
        :'to' => :'to',
        :'uui' => :'uui',
        :'call_timeout' => :'callTimeout',
        :'callback_timeout' => :'callbackTimeout',
        :'answer_url' => :'answerUrl',
        :'answer_fallback_url' => :'answerFallbackUrl',
        :'username' => :'username',
        :'password' => :'password',
        :'fallback_username' => :'fallbackUsername',
        :'fallback_password' => :'fallbackPassword',
        :'answer_method' => :'answerMethod',
        :'answer_fallback_method' => :'answerFallbackMethod',
        :'disconnect_url' => :'disconnectUrl',
        :'disconnect_method' => :'disconnectMethod',
        :'tag' => :'tag',
        :'application_id' => :'applicationId',
        :'machine_detection' => :'machineDetection'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'from' => :'String',
        :'to' => :'String',
        :'uui' => :'String',
        :'call_timeout' => :'Float',
        :'callback_timeout' => :'Float',
        :'answer_url' => :'String',
        :'answer_fallback_url' => :'String',
        :'username' => :'String',
        :'password' => :'String',
        :'fallback_username' => :'String',
        :'fallback_password' => :'String',
        :'answer_method' => :'String',
        :'answer_fallback_method' => :'String',
        :'disconnect_url' => :'String',
        :'disconnect_method' => :'String',
        :'tag' => :'String',
        :'application_id' => :'String',
        :'machine_detection' => :'MachineDetectionConfiguration'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'uui',
        :'call_timeout',
        :'callback_timeout',
        :'answer_fallback_url',
        :'username',
        :'password',
        :'fallback_username',
        :'fallback_password',
        :'answer_method',
        :'answer_fallback_method',
        :'disconnect_url',
        :'disconnect_method',
        :'tag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubySdk::CreateCallRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubySdk::CreateCallRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'uui')
        self.uui = attributes[:'uui']
      end

      if attributes.key?(:'call_timeout')
        self.call_timeout = attributes[:'call_timeout']
      end

      if attributes.key?(:'callback_timeout')
        self.callback_timeout = attributes[:'callback_timeout']
      end

      if attributes.key?(:'answer_url')
        self.answer_url = attributes[:'answer_url']
      end

      if attributes.key?(:'answer_fallback_url')
        self.answer_fallback_url = attributes[:'answer_fallback_url']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'fallback_username')
        self.fallback_username = attributes[:'fallback_username']
      end

      if attributes.key?(:'fallback_password')
        self.fallback_password = attributes[:'fallback_password']
      end

      if attributes.key?(:'answer_method')
        self.answer_method = attributes[:'answer_method']
      end

      if attributes.key?(:'answer_fallback_method')
        self.answer_fallback_method = attributes[:'answer_fallback_method']
      end

      if attributes.key?(:'disconnect_url')
        self.disconnect_url = attributes[:'disconnect_url']
      end

      if attributes.key?(:'disconnect_method')
        self.disconnect_method = attributes[:'disconnect_method']
      end

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'machine_detection')
        self.machine_detection = attributes[:'machine_detection']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @from.nil?
        invalid_properties.push('invalid value for "from", from cannot be nil.')
      end

      if @to.nil?
        invalid_properties.push('invalid value for "to", to cannot be nil.')
      end

      if @answer_url.nil?
        invalid_properties.push('invalid value for "answer_url", answer_url cannot be nil.')
      end

      if @application_id.nil?
        invalid_properties.push('invalid value for "application_id", application_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @from.nil?
      return false if @to.nil?
      return false if @answer_url.nil?
      answer_method_validator = EnumAttributeValidator.new('String', ["POST", "GET"])
      return false unless answer_method_validator.valid?(@answer_method)
      answer_fallback_method_validator = EnumAttributeValidator.new('String', ["POST", "GET"])
      return false unless answer_fallback_method_validator.valid?(@answer_fallback_method)
      disconnect_method_validator = EnumAttributeValidator.new('String', ["POST", "GET"])
      return false unless disconnect_method_validator.valid?(@disconnect_method)
      return false if @application_id.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] answer_method Object to be assigned
    def answer_method=(answer_method)
      validator = EnumAttributeValidator.new('String', ["POST", "GET"])
      unless validator.valid?(answer_method)
        fail ArgumentError, "invalid value for \"answer_method\", must be one of #{validator.allowable_values}."
      end
      @answer_method = answer_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] answer_fallback_method Object to be assigned
    def answer_fallback_method=(answer_fallback_method)
      validator = EnumAttributeValidator.new('String', ["POST", "GET"])
      unless validator.valid?(answer_fallback_method)
        fail ArgumentError, "invalid value for \"answer_fallback_method\", must be one of #{validator.allowable_values}."
      end
      @answer_fallback_method = answer_fallback_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] disconnect_method Object to be assigned
    def disconnect_method=(disconnect_method)
      validator = EnumAttributeValidator.new('String', ["POST", "GET"])
      unless validator.valid?(disconnect_method)
        fail ArgumentError, "invalid value for \"disconnect_method\", must be one of #{validator.allowable_values}."
      end
      @disconnect_method = disconnect_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          from == o.from &&
          to == o.to &&
          uui == o.uui &&
          call_timeout == o.call_timeout &&
          callback_timeout == o.callback_timeout &&
          answer_url == o.answer_url &&
          answer_fallback_url == o.answer_fallback_url &&
          username == o.username &&
          password == o.password &&
          fallback_username == o.fallback_username &&
          fallback_password == o.fallback_password &&
          answer_method == o.answer_method &&
          answer_fallback_method == o.answer_fallback_method &&
          disconnect_url == o.disconnect_url &&
          disconnect_method == o.disconnect_method &&
          tag == o.tag &&
          application_id == o.application_id &&
          machine_detection == o.machine_detection
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [from, to, uui, call_timeout, callback_timeout, answer_url, answer_fallback_url, username, password, fallback_username, fallback_password, answer_method, answer_fallback_method, disconnect_url, disconnect_method, tag, application_id, machine_detection].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
