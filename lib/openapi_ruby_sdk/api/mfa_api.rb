=begin
#FrankenSpec

#Bandwidth's Frankensteined API Spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module RubySdk
  class MFAApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Messaging Authentication
    # Multi-Factor authentication with Bandwidth Messaging services. Allows a user to send an MFA code via a text message (SMS).
    # @param account_id [String] Bandwidth Account ID with Messaging service enabled
    # @param two_factor_code_request_schema [TwoFactorCodeRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [TwoFactorMessagingResponse]
    def messaging_two_factor(account_id, two_factor_code_request_schema, opts = {})
      data, _status_code, _headers = messaging_two_factor_with_http_info(account_id, two_factor_code_request_schema, opts)
      data
    end

    # Messaging Authentication
    # Multi-Factor authentication with Bandwidth Messaging services. Allows a user to send an MFA code via a text message (SMS).
    # @param account_id [String] Bandwidth Account ID with Messaging service enabled
    # @param two_factor_code_request_schema [TwoFactorCodeRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TwoFactorMessagingResponse, Integer, Hash)>] TwoFactorMessagingResponse data, response status code and response headers
    def messaging_two_factor_with_http_info(account_id, two_factor_code_request_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAApi.messaging_two_factor ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MFAApi.messaging_two_factor"
      end
      # verify the required parameter 'two_factor_code_request_schema' is set
      if @api_client.config.client_side_validation && two_factor_code_request_schema.nil?
        fail ArgumentError, "Missing the required parameter 'two_factor_code_request_schema' when calling MFAApi.messaging_two_factor"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/code/messaging'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(two_factor_code_request_schema)

      # return_type
      return_type = opts[:debug_return_type] || 'TwoFactorMessagingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"MFAApi.messaging_two_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAApi#messaging_two_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify Authentication Code
    # Allows a user to verify an MFA code.
    # @param account_id [String] Bandwidth Account ID with Two-Factor enabled
    # @param two_factor_verify_request_schema [TwoFactorVerifyRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [TwoFactorVerifyCodeResponse]
    def verify_two_factor(account_id, two_factor_verify_request_schema, opts = {})
      data, _status_code, _headers = verify_two_factor_with_http_info(account_id, two_factor_verify_request_schema, opts)
      data
    end

    # Verify Authentication Code
    # Allows a user to verify an MFA code.
    # @param account_id [String] Bandwidth Account ID with Two-Factor enabled
    # @param two_factor_verify_request_schema [TwoFactorVerifyRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TwoFactorVerifyCodeResponse, Integer, Hash)>] TwoFactorVerifyCodeResponse data, response status code and response headers
    def verify_two_factor_with_http_info(account_id, two_factor_verify_request_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAApi.verify_two_factor ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MFAApi.verify_two_factor"
      end
      # verify the required parameter 'two_factor_verify_request_schema' is set
      if @api_client.config.client_side_validation && two_factor_verify_request_schema.nil?
        fail ArgumentError, "Missing the required parameter 'two_factor_verify_request_schema' when calling MFAApi.verify_two_factor"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/code/verify'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(two_factor_verify_request_schema)

      # return_type
      return_type = opts[:debug_return_type] || 'TwoFactorVerifyCodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"MFAApi.verify_two_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAApi#verify_two_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voice Authentication
    # Multi-Factor authentication with Bandwidth Voice services. Allows for a user to send an MFA code via a phone call.
    # @param account_id [String] Bandwidth Account ID with Voice service enabled
    # @param two_factor_code_request_schema [TwoFactorCodeRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [TwoFactorVoiceResponse]
    def voice_two_factor(account_id, two_factor_code_request_schema, opts = {})
      data, _status_code, _headers = voice_two_factor_with_http_info(account_id, two_factor_code_request_schema, opts)
      data
    end

    # Voice Authentication
    # Multi-Factor authentication with Bandwidth Voice services. Allows for a user to send an MFA code via a phone call.
    # @param account_id [String] Bandwidth Account ID with Voice service enabled
    # @param two_factor_code_request_schema [TwoFactorCodeRequestSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TwoFactorVoiceResponse, Integer, Hash)>] TwoFactorVoiceResponse data, response status code and response headers
    def voice_two_factor_with_http_info(account_id, two_factor_code_request_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAApi.voice_two_factor ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MFAApi.voice_two_factor"
      end
      # verify the required parameter 'two_factor_code_request_schema' is set
      if @api_client.config.client_side_validation && two_factor_code_request_schema.nil?
        fail ArgumentError, "Missing the required parameter 'two_factor_code_request_schema' when calling MFAApi.voice_two_factor"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/code/voice'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(two_factor_code_request_schema)

      # return_type
      return_type = opts[:debug_return_type] || 'TwoFactorVoiceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"MFAApi.voice_two_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAApi#voice_two_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
