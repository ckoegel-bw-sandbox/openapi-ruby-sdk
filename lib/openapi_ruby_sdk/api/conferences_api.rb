=begin
#FrankenSpec

#Bandwidth's Frankensteined API Spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module RubySdk
  class ConferencesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download Recording
    # Downloads the specified recording.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def download_conference_recording(account_id, conference_id, recording_id, opts = {})
      data, _status_code, _headers = download_conference_recording_with_http_info(account_id, conference_id, recording_id, opts)
      data
    end

    # Download Recording
    # Downloads the specified recording.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_conference_recording_with_http_info(account_id, conference_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.download_conference_recording ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.download_conference_recording"
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling ConferencesApi.download_conference_recording"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling ConferencesApi.download_conference_recording"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['audio/vnd.wave', 'audio/mpeg', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.download_conference_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#download_conference_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conference Information
    # Returns information about the specified conference.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConferenceState]
    def get_conference(account_id, conference_id, opts = {})
      data, _status_code, _headers = get_conference_with_http_info(account_id, conference_id, opts)
      data
    end

    # Get Conference Information
    # Returns information about the specified conference.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConferenceState, Integer, Hash)>] ConferenceState data, response status code and response headers
    def get_conference_with_http_info(account_id, conference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.get_conference ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.get_conference"
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling ConferencesApi.get_conference"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceState'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.get_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Member Information
    # Returns information about the specified conference member.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param member_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConferenceMemberState]
    def get_conference_member(account_id, conference_id, member_id, opts = {})
      data, _status_code, _headers = get_conference_member_with_http_info(account_id, conference_id, member_id, opts)
      data
    end

    # Get Member Information
    # Returns information about the specified conference member.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param member_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConferenceMemberState, Integer, Hash)>] ConferenceMemberState data, response status code and response headers
    def get_conference_member_with_http_info(account_id, conference_id, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.get_conference_member ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.get_conference_member"
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling ConferencesApi.get_conference_member"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling ConferencesApi.get_conference_member"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s)).sub('{' + 'memberId' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceMemberState'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.get_conference_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recording Information
    # Returns metadata for the specified recording.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CallRecordingMetadata]
    def get_conference_recording(account_id, conference_id, recording_id, opts = {})
      data, _status_code, _headers = get_conference_recording_with_http_info(account_id, conference_id, recording_id, opts)
      data
    end

    # Get Recording Information
    # Returns metadata for the specified recording.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallRecordingMetadata, Integer, Hash)>] CallRecordingMetadata data, response status code and response headers
    def get_conference_recording_with_http_info(account_id, conference_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.get_conference_recording ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.get_conference_recording"
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling ConferencesApi.get_conference_recording"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling ConferencesApi.get_conference_recording"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CallRecordingMetadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.get_conference_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conference Recordings
    # Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ConferenceRecordingMetadata>]
    def get_conference_recordings(account_id, conference_id, opts = {})
      data, _status_code, _headers = get_conference_recordings_with_http_info(account_id, conference_id, opts)
      data
    end

    # Get Conference Recordings
    # Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ConferenceRecordingMetadata>, Integer, Hash)>] Array<ConferenceRecordingMetadata> data, response status code and response headers
    def get_conference_recordings_with_http_info(account_id, conference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.get_conference_recordings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.get_conference_recordings"
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling ConferencesApi.get_conference_recordings"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ConferenceRecordingMetadata>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.get_conference_recordings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference_recordings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conferences
    # Returns information about the conferences in the account.
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :min_created_time 
    # @option opts [String] :max_created_time 
    # @option opts [Integer] :page_size  (default to 1000)
    # @option opts [String] :page_token 
    # @return [Array<ConferenceState>]
    def get_conferences(account_id, opts = {})
      data, _status_code, _headers = get_conferences_with_http_info(account_id, opts)
      data
    end

    # Get Conferences
    # Returns information about the conferences in the account.
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :min_created_time 
    # @option opts [String] :max_created_time 
    # @option opts [Integer] :page_size 
    # @option opts [String] :page_token 
    # @return [Array<(Array<ConferenceState>, Integer, Hash)>] Array<ConferenceState> data, response status code and response headers
    def get_conferences_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.get_conferences ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.get_conferences"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'minCreatedTime'] = opts[:'min_created_time'] if !opts[:'min_created_time'].nil?
      query_params[:'maxCreatedTime'] = opts[:'max_created_time'] if !opts[:'max_created_time'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ConferenceState>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.get_conferences",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Conference
    # Modify the conference state.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param modify_conference_request [ModifyConferenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_conference(account_id, conference_id, modify_conference_request, opts = {})
      modify_conference_with_http_info(account_id, conference_id, modify_conference_request, opts)
      nil
    end

    # Update Conference
    # Modify the conference state.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param modify_conference_request [ModifyConferenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_conference_with_http_info(account_id, conference_id, modify_conference_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.modify_conference ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.modify_conference"
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling ConferencesApi.modify_conference"
      end
      # verify the required parameter 'modify_conference_request' is set
      if @api_client.config.client_side_validation && modify_conference_request.nil?
        fail ArgumentError, "Missing the required parameter 'modify_conference_request' when calling ConferencesApi.modify_conference"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(modify_conference_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.modify_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#modify_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Member
    # Updates settings for a particular conference member.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param call_id [String] 
    # @param conference_member_state [ConferenceMemberState] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_conference_member(account_id, conference_id, call_id, conference_member_state, opts = {})
      modify_conference_member_with_http_info(account_id, conference_id, call_id, conference_member_state, opts)
      nil
    end

    # Update Member
    # Updates settings for a particular conference member.
    # @param account_id [String] 
    # @param conference_id [String] 
    # @param call_id [String] 
    # @param conference_member_state [ConferenceMemberState] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_conference_member_with_http_info(account_id, conference_id, call_id, conference_member_state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConferencesApi.modify_conference_member ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConferencesApi.modify_conference_member"
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling ConferencesApi.modify_conference_member"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling ConferencesApi.modify_conference_member"
      end
      # verify the required parameter 'conference_member_state' is set
      if @api_client.config.client_side_validation && conference_member_state.nil?
        fail ArgumentError, "Missing the required parameter 'conference_member_state' when calling ConferencesApi.modify_conference_member"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(conference_member_state)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"ConferencesApi.modify_conference_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#modify_conference_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
