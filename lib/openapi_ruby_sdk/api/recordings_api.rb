=begin
#FrankenSpec

#Bandwidth's Frankensteined API Spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module RubySdk
  class RecordingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Transcription
    # Deletes the specified recording's transcription.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_call_transcription(account_id, call_id, recording_id, opts = {})
      delete_call_transcription_with_http_info(account_id, call_id, recording_id, opts)
      nil
    end

    # Delete Transcription
    # Deletes the specified recording&#39;s transcription.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_call_transcription_with_http_info(account_id, call_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.delete_call_transcription ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.delete_call_transcription"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.delete_call_transcription"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.delete_call_transcription"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.delete_call_transcription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#delete_call_transcription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Recording
    # Deletes the specified recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_recording(account_id, call_id, recording_id, opts = {})
      delete_recording_with_http_info(account_id, call_id, recording_id, opts)
      nil
    end

    # Delete Recording
    # Deletes the specified recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_recording_with_http_info(account_id, call_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.delete_recording ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.delete_recording"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.delete_recording"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.delete_recording"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.delete_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#delete_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Recording Media
    # Deletes the specified recording's media.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_recording_media(account_id, call_id, recording_id, opts = {})
      delete_recording_media_with_http_info(account_id, call_id, recording_id, opts)
      nil
    end

    # Delete Recording Media
    # Deletes the specified recording&#39;s media.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_recording_media_with_http_info(account_id, call_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.delete_recording_media ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.delete_recording_media"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.delete_recording_media"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.delete_recording_media"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.delete_recording_media",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#delete_recording_media\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Recording
    # Downloads the specified recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def download_call_recording(account_id, call_id, recording_id, opts = {})
      data, _status_code, _headers = download_call_recording_with_http_info(account_id, call_id, recording_id, opts)
      data
    end

    # Download Recording
    # Downloads the specified recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_call_recording_with_http_info(account_id, call_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.download_call_recording ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.download_call_recording"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.download_call_recording"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.download_call_recording"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['audio/vnd.wave', 'audio/mpeg', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.download_call_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#download_call_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Recording
    # Returns metadata for the specified recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CallRecordingMetadata]
    def get_call_recording(account_id, call_id, recording_id, opts = {})
      data, _status_code, _headers = get_call_recording_with_http_info(account_id, call_id, recording_id, opts)
      data
    end

    # Get Call Recording
    # Returns metadata for the specified recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallRecordingMetadata, Integer, Hash)>] CallRecordingMetadata data, response status code and response headers
    def get_call_recording_with_http_info(account_id, call_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.get_call_recording ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.get_call_recording"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.get_call_recording"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.get_call_recording"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CallRecordingMetadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.get_call_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#get_call_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Recordings
    # Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<CallRecordingMetadata>]
    def get_call_recordings(account_id, call_id, opts = {})
      data, _status_code, _headers = get_call_recordings_with_http_info(account_id, call_id, opts)
      data
    end

    # Get Call Recordings
    # Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CallRecordingMetadata>, Integer, Hash)>] Array<CallRecordingMetadata> data, response status code and response headers
    def get_call_recordings_with_http_info(account_id, call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.get_call_recordings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.get_call_recordings"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.get_call_recordings"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CallRecordingMetadata>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.get_call_recordings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#get_call_recordings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Transcription
    # Downloads the specified transcription.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TranscriptionResponse]
    def get_call_transcription(account_id, call_id, recording_id, opts = {})
      data, _status_code, _headers = get_call_transcription_with_http_info(account_id, call_id, recording_id, opts)
      data
    end

    # Get Transcription
    # Downloads the specified transcription.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TranscriptionResponse, Integer, Hash)>] TranscriptionResponse data, response status code and response headers
    def get_call_transcription_with_http_info(account_id, call_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.get_call_transcription ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.get_call_transcription"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.get_call_transcription"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.get_call_transcription"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TranscriptionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.get_call_transcription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#get_call_transcription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Recording
    # Pauses or resumes a recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param modify_call_recording_request [ModifyCallRecordingRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_call_recording_state(account_id, call_id, modify_call_recording_request, opts = {})
      modify_call_recording_state_with_http_info(account_id, call_id, modify_call_recording_request, opts)
      nil
    end

    # Update Recording
    # Pauses or resumes a recording.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param modify_call_recording_request [ModifyCallRecordingRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_call_recording_state_with_http_info(account_id, call_id, modify_call_recording_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.modify_call_recording_state ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.modify_call_recording_state"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.modify_call_recording_state"
      end
      # verify the required parameter 'modify_call_recording_request' is set
      if @api_client.config.client_side_validation && modify_call_recording_request.nil?
        fail ArgumentError, "Missing the required parameter 'modify_call_recording_request' when calling RecordingsApi.modify_call_recording_state"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recording'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(modify_call_recording_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.modify_call_recording_state",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#modify_call_recording_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Recordings
    # Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from 
    # @option opts [String] :to 
    # @option opts [String] :min_start_time 
    # @option opts [String] :max_start_time 
    # @return [Array<CallRecordingMetadata>]
    def query_call_recordings(account_id, opts = {})
      data, _status_code, _headers = query_call_recordings_with_http_info(account_id, opts)
      data
    end

    # Get Call Recordings
    # Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
    # @param account_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from 
    # @option opts [String] :to 
    # @option opts [String] :min_start_time 
    # @option opts [String] :max_start_time 
    # @return [Array<(Array<CallRecordingMetadata>, Integer, Hash)>] Array<CallRecordingMetadata> data, response status code and response headers
    def query_call_recordings_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.query_call_recordings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.query_call_recordings"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/recordings'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'minStartTime'] = opts[:'min_start_time'] if !opts[:'min_start_time'].nil?
      query_params[:'maxStartTime'] = opts[:'max_start_time'] if !opts[:'max_start_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CallRecordingMetadata>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.query_call_recordings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#query_call_recordings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Transcription Request
    # Requests that the specified recording be transcribed.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param transcribe_recording_request [TranscribeRecordingRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def transcribe_call_recording(account_id, call_id, recording_id, transcribe_recording_request, opts = {})
      transcribe_call_recording_with_http_info(account_id, call_id, recording_id, transcribe_recording_request, opts)
      nil
    end

    # Create Transcription Request
    # Requests that the specified recording be transcribed.
    # @param account_id [String] 
    # @param call_id [String] 
    # @param recording_id [String] 
    # @param transcribe_recording_request [TranscribeRecordingRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def transcribe_call_recording_with_http_info(account_id, call_id, recording_id, transcribe_recording_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.transcribe_call_recording ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling RecordingsApi.transcribe_call_recording"
      end
      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling RecordingsApi.transcribe_call_recording"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.transcribe_call_recording"
      end
      # verify the required parameter 'transcribe_recording_request' is set
      if @api_client.config.client_side_validation && transcribe_recording_request.nil?
        fail ArgumentError, "Missing the required parameter 'transcribe_recording_request' when calling RecordingsApi.transcribe_call_recording"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transcribe_recording_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['httpBasic']

      new_options = opts.merge(
        :operation => :"RecordingsApi.transcribe_call_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#transcribe_call_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
